go.property("near_z", -1)
go.property("far_z", 1)
go.property("zoom", 1)
go.property("projection", hash("DEFAULT"))
go.property("enabled", true)
go.property("order", 1)

go.property("follow", false)
go.property("follow_horizontal", true)
go.property("follow_vertical", true)
go.property("follow_immediately", false)
go.property("follow_target", hash(""))
go.property("follow_lerp", 0.5)
go.property("follow_offset", vmath.vector3(0, 0, 0))

go.property("bounds_left", 0)
go.property("bounds_bottom", 0)
go.property("bounds_right", 0)
go.property("bounds_top", 0)

go.property("deadzone_left", 0)
go.property("deadzone_bottom", 0)
go.property("deadzone_right", 0)
go.property("deadzone_top", 0)

go.property("viewport_left", 0)
go.property("viewport_bottom", 0)
go.property("viewport_right", 0)
go.property("viewport_top", 0)

local camera = require "orthographic.camera"

local function has_active_follow_target(follow_id)
	local ok, err = pcall(go.get_position, follow_id)
	return ok
end

local function position_on_follow(self)
	if has_active_follow_target(self.follow_target) then
		local target_position = go.get_position(self.follow_target)
		local camera_position = go.get_position()
		target_position.z = camera_position.z
		go.set_position(target_position)
	end
end

function init(self)
	camera.init(go.get_id(), msg.url(), { zoom = self.zoom })
	camera.update(go.get_id(), 0)
	if self.enabled then
		camera.send_view_projection(go.get_id())
		if self.follow and self.follow_immediately then
			position_on_follow(self)
		end
	end
end


function final(self)
	camera.final(go.get_id())
end


function update(self, dt)
	-- update camera and view projection after all game objects have been updated
	-- will jitter otherwise
	self.last_dt = dt
	msg.post("#", camera.MSG_UPDATE_CAMERA)
end


function on_message(self, message_id, message, sender)
	if message_id == camera.MSG_UPDATE_CAMERA then
		camera.update(go.get_id(), message.dt or self.last_dt)
		if self.enabled then
			camera.send_view_projection(go.get_id())
		end
	elseif message_id == camera.MSG_ENABLE then
		self.enabled = true
	elseif message_id == camera.MSG_DISABLE then
		self.enabled = false
	elseif message_id == camera.MSG_UNFOLLOW then
		self.follow = false
	elseif message_id == camera.MSG_USE_PROJECTION then
		assert(message.projection, "You must provide a projection")
		self.projection = message.projection
	elseif message_id == camera.MSG_FOLLOW then
		assert(message.target, "You must provide a target")
		self.follow = true
		if message.horizontal == nil then message.horizontal = true end
		if message.vertical == nil then message.vertical = true end
		local lerp = message.lerp or 1
		if lerp < 0 then lerp = 0 end
		if lerp > 1 then lerp = 1 end
		self.follow_horizontal = message.horizontal
		self.follow_vertical = message.vertical
		self.follow_target = type(message.target) == "string" and hash(message.target) or message.target
		self.follow_lerp = lerp
		self.follow_offset = message.offset or vmath.vector3()
		self.follow_immediately = message.immediate
		if self.follow and self.follow_immediately then
			position_on_follow(self)
		end
	elseif message_id == camera.MSG_FOLLOW_OFFSET then
		assert(message.offset, "You must provide an offset")
		self.follow_offset = message.offset
	elseif message_id == camera.MSG_DEADZONE then
		self.deadzone_right = message.right or 0
		self.deadzone_top = message.top or 0
		self.deadzone_left = message.left or 0
		self.deadzone_bottom = message.bottom or 0
	elseif message_id == camera.MSG_BOUNDS then
		self.bounds_right = message.right or 0
		self.bounds_top = message.top or 0
		self.bounds_left = message.left or 0
		self.bounds_bottom = message.bottom or 0
	elseif message_id == camera.MSG_VIEWPORT then
		self.viewport_right = message.right or 0
		self.viewport_top = message.top or 0
		self.viewport_left = message.left or 0
		self.viewport_bottom = message.bottom or 0
	elseif message_id == camera.MSG_SHAKE then
		camera.shake(go.get_id(), message.intensity, message.duration, message.direction, function()
			msg.post(sender, camera.MSG_SHAKE_COMPLETED)
		end)
	elseif message_id == camera.MSG_RECOIL then
		camera.recoil(go.get_id(), message.offset, message.duration)
	elseif message_id == camera.MSG_STOP_SHAKING then
		camera.stop_shaking(go.get_id())
	elseif message_id == camera.MSG_ZOOM_TO then
		assert(message.zoom, "You must provide a zoom level")
		self.zoom = message.zoom
	end
end