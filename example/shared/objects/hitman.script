go.property("max_camera_offset", vmath.vector3(300, 500, 0))
go.property("camera_offset_lerp", 0.05)
go.property("crosshair", true)

local camera = require "orthographic.camera"

local SPEED = 400

local CAMERA_ID = hash("/camera")

function init(self)
	self.input = {}
	self.camera_offset = vmath.vector3()
	msg.post(".", "acquire_input_focus")
end

function update(self, dt)

	-- rotate towards cursor
	if self.crosshair then
		local crosshair_world = go.get_world_position("crosshair")
		local player_world = go.get_world_position()
		local angle = math.atan2(player_world.x - crosshair_world.x, crosshair_world.y - player_world.y)
		local rotation = vmath.quat_rotation_z(angle)
		go.set_rotation(rotation)
	end
		
	-- update player position
	local pos = go.get_position()
	if self.input[hash("up")] then
		pos.y = pos.y + SPEED * dt
		self.camera_offset.y = vmath.lerp(self.camera_offset_lerp, self.camera_offset.y, self.max_camera_offset.x)
	elseif self.input[hash("down")] then
		pos.y = pos.y - SPEED * dt
		self.camera_offset.y = vmath.lerp(self.camera_offset_lerp, self.camera_offset.y, -self.max_camera_offset.x)
	end
	if self.input[hash("left")] then
		pos.x = pos.x - SPEED * dt
		self.camera_offset.x = vmath.lerp(self.camera_offset_lerp, self.camera_offset.x, -self.max_camera_offset.y)
	elseif self.input[hash("right")] then
		pos.x = pos.x + SPEED * dt
		self.camera_offset.x = vmath.lerp(self.camera_offset_lerp, self.camera_offset.x, self.max_camera_offset.y)
	end

	go.set_position(pos)

	msg.post(CAMERA_ID, camera.MSG_FOLLOW_OFFSET, { offset = self.camera_offset})
end

function on_input(self, action_id, action)
	if action_id then
		if action.pressed then
			self.input[action_id] = true
		elseif action.released then
			self.input[action_id] = false
		end

		-- shoot and apply recoil
		if self.crosshair and action_id == hash("touch") and action.released then
			local crosshair_world = go.get_position("crosshair")
			local player_world = go.get_position()
			msg.post("@render:", "draw_line", { start_point = player_world, end_point = crosshair_world, color = vmath.vector4(0, 1, 0, 1) } )
			local offset = (crosshair_world - player_world) * 0.1
			camera.recoil(CAMERA_ID, offset, 0.5)
		end
	end
end
